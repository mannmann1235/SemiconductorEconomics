using System;
using System.Collections.Generic;

namespace SemiconductorPipeline
{
    class Program
    {
        static void Main(string[] args)
        {
            // Simulated production log
            List<Dictionary<string, object>> productionLog = new List<Dictionary<string, object>>();

            // Simulate multiple wafers across days (timestamps)
            DateTime startDate = new DateTime(2025, 9, 1);
            int numWafers = 10;

            Random rnd = new Random();

            for (int i = 0; i < numWafers; i++)
            {
                DateTime timestamp = startDate.AddDays(i);

                Console.WriteLine($"\n=== Processing Wafer {i + 1} at {timestamp:yyyy-MM-dd} ===");

                var waferData = new Dictionary<string, object>
                {
                    { "WaferID", $"W{i+1:D3}" },
                    { "Timestamp", timestamp }
                };

                // Cube 1: Metrology
                var cube1 = CollectMetrologyData(rnd);
                if (!(bool)cube1["Valid"])
                {
                    Console.WriteLine("Cube 1 failed. Skipping wafer.");
                    continue;
                }
                waferData["Cube1"] = cube1;

                // Cube 2: Final Test
                var cube2 = CollectFinalTestData(rnd);
                if (!(bool)cube2["Valid"])
                {
                    Console.WriteLine("Cube 2 failed. Skipping wafer.");
                    continue;
                }
                waferData["Cube2"] = cube2;

                // Cube 3: Tracking
                var cube3 = CollectTrackingData(rnd, i + 1);
                if (!(bool)cube3["Valid"])
                {
                    Console.WriteLine("Cube 3 failed. Skipping wafer.");
                    continue;
                }
                waferData["Cube3"] = cube3;

                // Add wafer record to production log
                productionLog.Add(waferData);

                Console.WriteLine("Wafer successfully processed and logged.");
            }

            // Print final production log summary
            Console.WriteLine("\n=== Production Log Summary ===");
            foreach (var wafer in productionLog)
            {
                Console.WriteLine($"Wafer {wafer["WaferID"]}, Timestamp: {wafer["Timestamp"]:yyyy-MM-dd}");
                var cube1 = (Dictionary<string, object>)wafer["Cube1"];
                var cube2 = (Dictionary<string, object>)wafer["Cube2"];
                var cube3 = (Dictionary<string, object>)wafer["Cube3"];

                Console.WriteLine($"  Cube1 - LayerAlignment: {cube1["LayerAlignment"]}, Defects: {cube1["Defects"]}, Thickness: {cube1["Thickness"]}nm");
                Console.WriteLine($"  Cube2 - Speed: {cube2["Speed"]}GHz, Leakage: {cube2["Leakage"]}mA, Yield: {cube2["Yield"]}");
                Console.WriteLine($"  Cube3 - BatchID: {cube3["BatchID"]}, RFIDStatus: {cube3["RFIDStatus"]}, MESLogged: {cube3["MESLogged"]}");
            }
        }

        static Dictionary<string, object> CollectMetrologyData(Random rnd)
        {
            return new Dictionary<string, object>
            {
                { "Stage", "Metrology" },
                { "Valid", true },
                { "LayerAlignment", Math.Round(0.95 + rnd.NextDouble() * 0.05, 3) },
                { "Defects", rnd.Next(0, 5) },
                { "Thickness", Math.Round(295 + rnd.NextDouble() * 10, 2) }
            };
        }

        static Dictionary<string, object> CollectFinalTestData(Random rnd)
        {
            return new Dictionary<string, object>
            {
                { "Stage", "Final Test" },
                { "Valid", true },
                { "Speed", Math.Round(2.0 + rnd.NextDouble() * 0.8, 2) },
                { "Leakage", Math.Round(0.01 + rnd.NextDouble() * 0.1, 3) },
                { "Yield", Math.Round(0.90 + rnd.NextDouble() * 0.1, 2) }
            };
        }

        static Dictionary<string, object> CollectTrackingData(Random rnd, int waferNum)
        {
            return new Dictionary<string, object>
            {
                { "Stage", "Tracking" },
                { "Valid", true },
                { "BatchID", $"BATCH{waferNum:D2}" },
                { "RFIDStatus", "Scanned" },
                { "MESLogged", true }
            };
        }
    }
}
